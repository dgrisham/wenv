#!/usr/bin/env zsh

wenv_dir="$SRC/wenv"
wenv_deps=()
wenv_extensions=('c')

bootstrap_wenv() {}
startup_wenv() {}
shutdown_wenv() {}

export WENV_CFG="${XDG_CONFIG_HOME:-$HOME/.config}/wenv"

__wenv() {
    local usage="\
USAGE
  wenv [-h] <cmd>

OPTIONS
  -h                    Display this help message.

SUBCOMMANDS
  start <wenv>          Start the working environment <wenv>.
  stop                  Stop the current working environment.
  new                   Create a new working environment.
  list                  List all wenvs
  edit <wenv>           Edit the wenv file for <wenv>.
  rename <old> <new>    Rename wenv <old> to <new>.
  remove <wenv>         Delete the wenv file for <wenv>.
  source <wenv>         Source the wenv file for <wenv>.
  cd <wenv>             Change to <wenv>'s base directory.
  extension <cmd>       Interact with wenv extensions.
  bootstrap <wenv>      Run <wenv>'s bootstrap function.

Run \`wenv <cmd> -h\` for more information on a given subcommand <cmd>.
"

    [[ $# == 0 ]] && { echo "$usage" >&2 ; return 1 }

    local opt OPTIND
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local wenv_command="$1"
    shift
    case "$wenv_command" in
        start)
            wenv_start $@
            ;;
        stop)
            wenv_stop $@
            ;;
        'cd')
            wenv_cd $@
            ;;
        new)
            wenv_new $@
            ;;
        ls|list)
            wenv_list $@
            ;;
        edit)
            wenv_edit $@
            ;;
        rm|remove)
            wenv_remove $@
            ;;
        mv|rename)
            wenv_rename $@
            ;;
        'source')
            wenv_source $@
            ;;
        extension)
            wenv_extension $@
            ;;
        bootstrap)
            wenv_bootstrap $@
            ;;
        *)
            echo "invalid command '$wenv_command'" >&2
            return 1
            ;;
    esac
}
alias wenv='noglob __wenv'

wenv_start() {
    local usage="\
USAGE
  wenv start [-i] [-q] [-h] <wenv> - Start working environemnt <wenv>. If <wenv> is already running, attach to it.

OPTIONS
  -i    Run <wenv>'s startup function. Default: true.
  -d    Don't attach to the wenv's tmux session after starting. Default: false.
  -h    Display this help message.
"

    local flag_q=0
    local flag_i=1
    local flag_d=0

    local opt OPTIND
    while getopts ":qidh" opt; do
        case $opt in
            q)
                flag_q=1
                ;;
            i)
                flag_i=0
                ;;
            d)
                flag_d=1
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    (($# == 0)) && return 1

    # expand the $@ wenv args into an array here, handling globs/multiple wenvs/etc.
    # the `perl` command prefixes every wenv with $WENV_CFG/wenvs, while the `eval echo` handles glob expansions
    local wenv_files
    wenv_files=($(eval echo $(perl -pe "s|([^ ]+)|$WENV_CFG/wenvs/\1|g" <<< $@)))
    (($(wc -w <<< $wenv_files) > 1)) && flag_d=1 # if multiple wenvs were provided, don't attach to tmux session

    for wenv_file in $wenv_files; do

        local wenv=${wenv_file#"$WENV_CFG/wenvs/"}

        if [[ ! -f $wenv_file ]]; then
            echo "wenv '$wenv' does not exist" >&2
            continue
        fi

        if ! tmux list-sessions | grep "^$wenv:" >/dev/null; then # wenv isn't running yet, start it
            # create tmux session for wenv
            tmux new-session -d -s "$wenv"

            mkdir -p /tmp/wenv
            # replace / with - for wenvs in subdirectories
            local tmp_start_file="/tmp/wenv/start-$(perl -pe 's|/|-|g' <<< $wenv)"
            [[ -f "$tmp_start_file" ]] && rm -f "$tmp_start_file"
            echo -e '
                wenv_exec '"$wenv"' || return 1
                tmux set-environment WENV "$WENV"
                (('"$flag_i"' == 1)) && startup_wenv
                clear
            '> "$tmp_start_file"

            tmux send -t "$wenv" " source $tmp_start_file && rm -f $tmp_start_file" ENTER

            ((flag_d == 1)) && { echo "started wenv '$wenv' " ; continue }
        else # wenv is already running
            ((flag_d == 1)) && { echo "wenv '$wenv' already running" ; continue }
        fi

        if [[ -n $TMUX ]]; then # we're in tmux, switch to specified wenv's session
            tmux switch -t "$wenv"
        else # not in tmux, attach to specified wenv's session
            tmux attach-session -t "$wenv"
        fi
    done

    return 0
}

wenv_exec() {
    [[ -z "$1" ]] && return 1
    export WENV="$1"

    wenv_source || { echo "failed to source wenv '$WENV'" >&2 ; return 1 }

    cd "$wenv_dir" &> /dev/null

    return 0
}

wenv_source() {
    local usage="\
USAGE
  wenv source [-h] [<wenv>, ...] - Source active wenv + its dependencies.

OPTIONS
  -h    Display this help message.

DESCRIPTION
  \`wenv source\` sources the active wenv's aliases and its dependencies.
"

    [[ -z "$WENV" ]] && { echo "error sourcing active wenv: \$WENV is empty" >&2 ; return 1 }

    local opt OPTIND
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    only_load_wenv_vars=1 source $WENV_CFG/wenvs/$WENV

    export WENV_DIR=$wenv_dir
    export WENV_DEPS=$wenv_deps
    export WENV_EXTENSIONS=$wenv_extensions

    ((${#WENV_EXTENSIONS[@]} != 0)) && wenv_extension_load "${WENV_EXTENSIONS[@]}"
    ((${#WENV_DEPS[@]} != 0)) && source_wenv_dependencies_recursively "${WENV_DEPS[@]}"

    source $WENV_CFG/wenvs/$WENV

    return 0
}

source_wenv_dependencies_recursively() {
    local wenv
    for wenv in $@; do
        unset_quiet wenv_deps

        only_load_wenv_vars=1 source "$WENV_CFG/wenvs/$wenv"
        eval source_wenv_dependencies_recursively $wenv_deps

        # source this wenv now that its dependencies are loaded
        source $WENV_CFG/wenvs/$wenv
    done
}

wenv_stop() {
    local usage="\
USAGE
  wenv stop [-h] [-f] [-s] - Shutdown the active working environment.

OPTIONS
  -f    Force shutdown even if \`shutdown_wenv()\` fails. Default: false.
  -s    Run the active wenv's shutdown function. Default: true.
  -h    Display this help message.
"

    [[ -z "$WENV" ]] && return 1

    local flag_f=0
    local flag_s=1

    local opt OPTIND
    while getopts ":fsh" opt; do
        case $opt in
            f)
                flag_f=1
                ;;
            s)
                flag_s=0
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    wenv_cd

    ((flag_s == 1)) && shutdown_wenv
    [[ $? -ne 0 ]] && ((flag_f != 1)) && { echo "error: shutdown_wenv failed" ; return 1 }
    wenv_clean_up
}

wenv_clean_up() {
    [[ -z "$WENV" ]] && return 1

    unset_quiet WENV
    unset_quiet WENV_{DIR,DEPS,EXTENSIONS}
    unset_quiet -f {bootstrap,startup,shutdown}_wenv

    if [[ -n "$TMUX" ]]; then
        tmux set-environment WENV ''
        tmux rename-session $(tmux display-message -p '#{session_id}' | tr -d '$')
    fi
}

wenv_new() {
    local usage="\
USAGE
  wenv new [-d <dir>] [-i <wenv>] [-h] <name> - Create a new wenv called <name>.

OPTIONS
  -d        Initialize wenv with <dir> as the new wenv's base directory rather than the current working directory.
  -i <wenv> Use <wenv>'s wenv file as the initial definition for the new wenv.
  -h        Display this help message.
"

    local template="$WENV_CFG/template"
    local wenv_dir=$(pwd)

    local opt OPTIND
    while getopts ":d:i:h" opt; do
        case $opt in
            d)
                wenv_dir="$OPTARG"
                ;;
            i)
                template="$WENV_CFG/wenvs/${OPTARG}"
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            :)
                echo "unknown option: $OPTARG requires an argument" >&2
                return 1
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$1" ]] && return 1
    local wenv="$1"

    if is_wenv "$1"; then
        echo "wenv '$wenv' already exists" >&2
        printf "overwrite? [yN] " >&2
        [[ ! $(read -e) =~ [yY] ]] && return 1
        rm -f "$WENV_CFG/wenvs/$wenv"
    fi

    mkdir -p $WENV_CFG/wenvs/$(dirname $wenv)
    cat =(perl -pe "s|wenv_dir=.*?$|wenv_dir=\"$wenv_dir\"|" "$template") > "$WENV_CFG/wenvs/$wenv"

    wenv_edit "$wenv"
}

wenv_edit() {
    local usage="\
USAGE
  wenv edit [-h] <wenv> - Open <wenv>'s wenv file in \$EDITOR.

OPTIONS
  -h    Display this help message.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    # nice bash syntax for setting var to first non-empty variable
    local wenv="${1:-${WENV}}"
    [[ -f "$WENV_CFG/wenvs/$wenv" ]] && $EDITOR "$WENV_CFG/wenvs/$wenv"
}

wenv_list() {
    local usage="\
USAGE
  wenv list [-h] - List wenvs.

OPTIONS
  -h        Display this help message.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    find "$WENV_CFG/wenvs" ! -type d | perl -pe "s|$WENV_CFG/wenvs/||" | sort
}

wenv_remove() {
    local usage="\
USAGE
  wenv remove [-h] [<rm_args>] <wenv> - Delete <wenv>'s wenv file.

OPTIONS
  -h        Display this help message.
  <rm_args> List of arguments to forward to \`rm\`.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            *) # forward the rest of the args to rm
                break
                ;;
        esac
    done

    # last passed argument is wenv to remove (usually quoted string)
    local wenv="${@[$#]}"
    # all other args are passed to rm
    local rm_args=${@:1:$(($# - 1))}

    if ! is_wenv "$wenv"; then
        echo "WENV $wenv does not exist."
        return 1
    fi

    local wenv_file="$WENV_CFG/wenvs/$wenv"
    eval "rm $rm_args $wenv_file"
}

wenv_cd() {
    local usage="\
USAGE
  wenv cd [-h] <wenv> - cd into <wenv>'s base directory.

OPTIONS
  -h    Display this help message.

DESCRIPTION
  Calling \`wenv cd\` with no arguments will \`cd\` into the active wenv's base
  directory.

  Calling as \`wenv cd <wenv>\` will \`cd\` into <wenv>'s base directory.

  The base directory of a wenv is defined by its \`wenv_dir\` value.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ -z "$1" ]]; then
        [[ -n "$WENV_DIR" ]] && cd "$WENV_DIR" &> /dev/null
        return 0
    fi

    if ! is_wenv "$1"; then
        echo "wenv '$1' doesn't exist" >&2
        return 1
    fi
    local wenv="$1"

    unset wenv_dir
    only_load_wenv_vars=1 source $WENV_CFG/wenvs/$wenv

    [[ -z "$wenv_dir" ]] && { echo "wenv_dir not defined for wenv '$wenv'" >&2 ; return 1 }

    cd $wenv_dir

    return 0
}

wenv_rename() {
    local usage="\
USAGE
  wenv rename [-h] <old> <new> - Rename wenv <old> to <new>.

OPTIONS
  -h                    Display this help message.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    [[ $# != 2 ]] && { echo "wenv rename requires two arguments" >&2 ; return 1 }
    local old="$1"
    local new="$2"

    if [[ "$new" == *"/"* ]]; then
        local new_dir="$WENV_CFG/wenvs/$(dirname $new)"
        if [[ ! -d  "$new_dir" ]]; then
            mkdir -p $new_dir
        fi
    fi

    mv "$WENV_CFG/wenvs/$old" "$WENV_CFG/wenvs/$new"
}

wenv_bootstrap() {
    local usage="\
USAGE
  wenv bootstrap [-h] <wenv> - Run the bootstrap function for a wenv.

OPTIONS
  -h    Display this help message.

DESCRIPTION
  A wenv's bootstrap function is used to set up the wenv's environment before
  the first time it's used. A wenv bootstrap function might pull down relevant
  git repos, install relevant packages, create config files, etc.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    if ! is_wenv "$1"; then
        echo "wenv '$1' doesn't exist" >&2
        return 1
    fi
    local wenv="$1"

    # clear out bootstrap_wenv if we're in an active wenv
    [[ -n "$WENV" ]] && unset_quiet -f bootstrap_wenv

    only_load_wenv_vars=1 source $WENV_CFG/wenvs/$wenv
    if ! function_exists bootstrap_wenv; then
        echo "bootstrap_wenv not defined for wenv '$1'" >&2
        return 1
    fi

    bootstrap_wenv
    unset_quiet -f bootstrap_wenv
}

wenv_extension() {
    local usage="\
USAGE
  wenv extension [-h] [<cmd>] - Interact with wenv extensions.

OPTIONS
  -h    Display this help message.

SUBCOMMANDS
  edit  Create or edit existing extensions.
  load  Load an extension.
  rm    Remove an extension.

DESCRIPTION
  Use  \`wenv extension <cmd> -h\` for more information on a given subcommand <cmd>.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    local arg="$1"
    shift 2> /dev/null
    case "$arg" in
        load)
            wenv_extension_load $@
            ;;
        edit)
            wenv_extension_edit $@
            ;;
        rm|remove)
            wenv_extension_remove $@
            ;;
        *)
            echo "$usage" >&2
            return 1
            ;;
    esac
}

wenv_extension_load() {
    local usage="\
USAGE
  wenv extension load [-h] <extension> [<extension> ...] - Source wenv extensions.

OPTIONS
  -h                               Display this help message.

ARGUMENTS
  <extension> [<extension> ...]    The names of the extension files to load.

DESCRIPTION
  This function sources the corresponding extension file at \$WENV_CFG/<extension>.
  This will only source the extension file in the current shell. See the
  documentation on the \`wenv_extensions\` configuration variable for loading an
  extension in every shell of a wenv.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$@" ]] && { echo "$usage" >&2 ; return 1 }
    local extensions="$WENV_CFG/extensions"
    for extension in "$@"; do
        if [[ ! -f "$extensions/$extension" ]]; then
            echo "'$extension' not found in $extensions" >&2
            return 1
        fi
        source "$extensions/$extension"
    done
}

wenv_extension_edit() {
    local usage="\
USAGE
  wenv extension new [-h] <extension> [<extension> ...] - Create or edit existing extensions.

OPTIONS
  -h                               Display this help message.

ARGUMENTS
  <extension> [<extension> ...]    The names of the extension files to create/edit.

DESCRIPTION
  Opens one or more extension files in \$EDITOR. When editing a extension file
  that doesn't already exist, the file will be created with a default shebang.
"

    local opt OPTIND
    while getopts ":h" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$@" ]] && { echo "$usage" >&2 ; return 1 }

    local abs=()
    for ext in $@; do
        file="$WENV_CFG/extensions/$ext"
        [[ ! -f "$file" ]] && echo '#!/usr/bin/env zsh' > "$file"
        abs+=($file)
    done
    $EDITOR "$abs[@]"
}

wenv_extension_remove() {
    local usage="\
USAGE
  wenv extension remove [-h] [-f] <extension> [<extension> ...] - Delete extension files.

OPTIONS
  -h    Display this help message.
  -f    Force removal (passes \`-f\` flag to \`rm\`).

DESCRIPTION
  Removes extensions from \$WENV_CFG/extensions. If any of the passed extension
  files don't exist, nothing will be removed.
"

    local flag_f=0

    local opt OPTIND
    while getopts ":fh" opt; do
        case "$opt" in
            f)
                flag_f=1
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    declare -A abs
    for ext in $@; do
        local file="$WENV_CFG/extensions/$ext"
        [[ ! -f "$file" ]] && { echo "Extension '$ext' does not exist" >&2 ; return 1 }
        abs[$ext]="$file"
    done

    if ((flag_f == 1)); then
        rm -f "${abs[@]}"
    else
        for ext in $@; do
            rm "${abs[$ext]}"
        done
    fi
    return 0
}

is_wenv() {
    if [[ -z "$1" ]]; then
        return 1
    fi
    local wenv_file="$WENV_CFG/wenvs/$1"
    if [[ ! -f "$wenv_file" ]]; then
        return 1
    fi
    return 0
}

unset_quiet() {
    unset $@ 2>/dev/null
}

function_exists() {
    declare -f "$1" >/dev/null
}
