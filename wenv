#!/usr/bin/zsh

wenv_def() {
    WENV_DIR="$SRC/wenv"
    WENV_DEPS=()
    WENV_PROJECT='wenv'
    WENV_TASK=''
    WENV_BRANCH='master'

    wenv_bootstrap() {}
    wenv_startup() {}
    wenv_shutdown() {}
}

export WENV_CFG="${XDG_CONFIG_HOME:-$HOME/.config}/wenv"

wenv() {
    local usage="\
USAGE
  $(basename $0) [-h] <cmd> ...

OPTIONS
  -h                    Display this help message.

SUBCOMMANDS
  start <wenv>          Start the working environment <wenv>.
  stop                  Stop the current working environment.
  new                   Create a new working environment.
  edit <wenv>           Edit the Wenv file for <wenv>.
  rename <old> <new>    Rename Wenv <old> to <new>.
  remove <wenv>         Delete the Wenv file for <wenv>.
  source <wenv>         Source <wenv>'s environment (excluding its wenv_def).
  cd <wenv>             Change to <wenv>'s base directory.
  task <cmd>            Access the project task list.
  bootstrap <wenv>      Run <wenv>'s bootstrap function.

Run \`wenv <cmd> --help\` for more information on a given subcommand <cmd>.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local wenv_command="$1"
    shift
    case "$wenv_command" in
        start)
            wenv_start $@
            ;;
        stop)
            wenv_stop $@
            ;;
        task)
            wenv_task $@
            ;;
        'cd')
            wenv_cd $@
            ;;
        new)
            wenv_new $@
            ;;
        bootstrap)
            _wenv_bootstrap $@
            ;;
        edit)
            wenv_edit $@
            ;;
        rm|remove)
            wenv_remove $@
            ;;
        'source')
            wenv_source $@
            ;;
        mv|rename)
            wenv_rename $@
            ;;
    esac
}

wenv_start() {
    local usage="\
USAGE
    wenv start [-h] <

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local flag_n=0
    local flag_q=0
    local flag_i=1
    while getopts ":nqi" opt; do
        case $opt in
            n) flag_n=1 ;;
            q) flag_q=1 ;;
            i) flag_i=0 ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ $# == 0 || ! -f "$WENV_CFG/wenvs/$1" ]]; then
        return 1
    fi
    local wenv="$1"

    if [[ $flag_n -eq 1 ]]; then
        wenv_stop
        wenv_exec $@ || return 1
        ((flag_i == 1)) && wenv_startup
        unset_quiet -f wenv_startup
        ((flag_q == 1)) || wenv task show
        return 0
    fi

    tmux new-session -d -s "$wenv"
    tmux send -t "$wenv" '{
        wenv_exec '"$@"' || return 1
        tmux set-environment WENV "$WENV"
        tmux bind-key - split-window -c "#{pane_current_path}" '"'"'WENV_EXEC="unset WENV; wenv_exec -c \"$WENV\"" zsh -i'"'"'
        tmux bind-key \\ split-window -h -c "#{pane_current_path}" '"'"'WENV_EXEC="unset WENV; wenv_exec -c \"$WENV\"" zsh -i'"'"'
        tmux bind-key c new-window -c "#{pane_current_path}" '"'"'WENV_EXEC="unset WENV; wenv_exec -c \"$WENV\"" zsh -i'"'"'
        (('"$flag_i"' == 1)) && wenv_startup
        unset_quiet -f wenv_startup
        clear
        (('"$flag_q"' == 1)) || wenv task show
    }' ENTER

    tmux attach-session -t "$wenv"
}

wenv_exec() {
    local flag_c=1
    while getopts ":c" opt; do
        case $opt in
            c) flag_c=0 ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$1" ]] && return 1
    export WENV="$1"

    wenv_load || return 1

    export ORIGINAL_PS1="$PS1"
    export PS1="($WENV) $ORIGINAL_PS1"

    [[ -n "$WENV_TASK" ]] && task start "$WENV_TASK" >/dev/null 2>&1

    ((flag_c == 1)) && cd "$WENV_DIR" &> /dev/null

    return 0
}

wenv_stop() {
    local usage="\
USAGE
    wenv stop [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    [[ -z "$WENV" ]] && return 1

    local flag_f=0
    local flag_s=1
    while getopts ":fe" opt; do
        case $opt in
            # force stop, regardless of git working tree state
            f) flag_f=0 ;;
            e) flag_s=0 ;;
        esac
    done
    shift $((OPTIND-1))

    # make sure we're in a git repo and the force flag isn't set
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1 && [[ $flag_f -ne 1 ]]; then
        git diff-index --quiet HEAD -- 2>/dev/null
        [[ $? -ne 0 ]] && [[ $? -ne 128 ]] && { echo "Error: Dirty working tree. Please clean up and try again." ; return 1 }
    fi

    wenv_cd

    [[ -n "$WENV_TASK" ]] && task "$WENV_TASK" stop

    ((flag_s == 1)) && wenv_shutdown &> /dev/null # TODO: decide when is best to run this
    wenv_clean_up
}

wenv_clean_up() {
    [[ -z "$WENV" ]] && return 1
    unset_quiet -f wenv_{init,shutdown}

    unset_quiet WENV
    unset_quiet WENV_{DIR,DEPS,PROJECT,BRANCH}

    if [[ -n "$TMUX" ]]; then
        tmux set-environment WENV ''
        tmux rename-session $(tmux display-message -p '#{session_id}' | tr -d '$')
    fi
    export PS1="$ORIGINAL_PS1"
}

# load either the input wenv, or the active WENV + its dependencies
wenv_load() {
    if [[ -n "$1" ]]; then
        local wenv="$1"
        run_wenv_def "$wenv"
        wenv_source "$wenv"
    elif [[ -n "$WENV" ]]; then
        run_wenv_def "$WENV"
        wenv_def
        wenv_source
    else
        return 1
    fi
    unset_quiet -f wenv_bootstrap
    return 0
}

run_wenv_def() {
    [[ -z "$1" ]] && return 1
    local wenv="$1"
    eval "$(source $WENV_CFG/wenvs/$wenv && declare -f wenv_def)"
    function_exists wenv_def || return 1
    wenv_def
}

wenv_new() {
    local usage="\
USAGE
    wenv new [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local template="$WENV_CFG/template"
    local flag_d=0
    while getopts ":di:" opt; do
        case $opt in
            d) flag_d=1 ;;
            i) [[ ! -z "$OPTARG" ]] && template="$WENV_CFG/wenvs/${OPTARG}" ;;
            --) break ;;
            *) echo "invalid flag: $1" ; exit 1 ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$1" ]] && return 1
    local wenv="$1"

    # generalize/clean this up
    if [[ $flag_d -eq 1 ]]; then
        cat =(sed -r "s@WENV_DIR=.*?@WENV_DIR=\"`pwd`\"@" "$template") > "$WENV_CFG/wenvs/$wenv"
    else
        # this case shouldn't be exclusive from previous
        cp "$template" "$WENV_CFG/wenvs/$wenv"
    fi
    wenv_edit "$wenv"
}

wenv_edit() {
    local usage="\
USAGE
    wenv edit [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    # nice bash syntax for setting var to first non-empty variable
    local wenv="${1:-${WENV}}"
    [[ -f "$WENV_CFG/wenvs/$wenv" ]] && "$EDITOR" "$WENV_CFG/wenvs/$wenv"
}

wenv_remove() {
    local usage="\
USAGE
    wenv remove [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    if [[ -z "$1" ]]; then
        return 1
    fi
    if ! is_wenv "$1"; then
        echo "WENV $1 does not exist."
        return 1
    fi
    local wenv="$1"
    local wenv_file="$WENV_CFG/wenvs/$wenv"
    read "choice?Delete WENV $wenv? "
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        rm -f "$wenv_file"
    fi
}

wenv_source() {
    local usage="\
USAGE
    wenv source [<wenv>, ...] [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    if [[ "$#" -eq 0 && -n "$WENV" ]]; then
        (( ${#WENV_DEPS[@]} != 0 )) && wenv_source "${WENV_DEPS[@]}"
        source "$WENV_CFG/wenvs/$WENV" >/dev/null
    fi
    local wenv
    for wenv in $@; do
        source "$WENV_CFG/wenvs/$wenv" >/dev/null
    done
    unset_quiet -f wenv_def
}

wenv_cd() {
    local usage="\
USAGE
    wenv cd [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local flag_r=0
    while getopts ":r" opt; do
        case $opt in
            r) flag_r=1 ;;
            --) break ;;
            *) echo "invalid flag: $1" ; exit 1 ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ -z "$1" ]]; then
        [[ ! -z "$WENV_DIR" ]] && cd "$WENV_DIR" &> /dev/null
        return 0
    fi
    if ! is_wenv "$1"; then
        return 1
    fi
    local wenv="$1"

    ((flag_r == 1)) && tmux rename-window "$wenv"

    # TODO: need a better way to do this
    # load and cd to input wenv
    wenv_load "$wenv"
    cd "$WENV_DIR"

    # reload the wenv that was previously running
    wenv_load "$WENV"
    unset_quiet -f wenv_startup

    return 0
}

wenv_task() {
    local usage="\
USAGE
    wenv task [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local arg="$1"
    shift 2> /dev/null
    case "$arg" in
        s|show)
            wenv_task_show $@
            ;;
        a|add)
            wenv_task_add $@
            ;;
        *)
            wenv_task_show "$arg" $@
            ;;
    esac
}

wenv_task_show() {
    local wenv="${WENV_PROJECT:-${WENV}}"
    [[ -z "$wenv" ]] && return 1
    local flag_w=0
    while getopts ":w:" opt; do
        case $opt in
            w)  [[ ! -z "$OPTARG" ]] && wenv="$OPTARG" ;;
            --) break ;;
            *)  echo "invalid flag: $1" ; return 1 ;;
        esac
    done
    shift $((OPTIND-1))

    local report="$1"
    [[ -z "$report" ]] && report="project"

    echo "$wenv"
    task "$report" project:"$wenv"
}

wenv_task_add() {
    [[ -z "$@" ]] && return 1
    local wenv="${WENV_PROJECT:-${WENV}}"
    local flag_w=0
    while getopts ":w:" opt; do
        case $opt in
            w)  [[ ! -z "$OPTARG" ]] && local wenv="$OPTARG" ;;
            --) break ;;
            *)  echo "invalid flag: $1" ; return 1 ;;
        esac
    done
    shift $((OPTIND-1))

    # last passed argument is description (usually quoted string)
    local desc="${@[$#]}"
    # all other args are passed to task warrior (yeah, this is ugly)
    local task_args=${@:1:$(($# - 1))}
    task add project:"$wenv" tags:"$WENV" "$task_args" -- "$desc"
}

wenv_rename() {
    local usage="\
USAGE
    wenv rename [-h]

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    [[ $# != 2 ]] && return 1
    local old="$1"
    local new="$2"

    mv "$WENV_CFG/wenvs/$old" "$WENV_CFG/wenvs/$new"
}

# TODO: figure out naming convention (preceding _ is so wenvs can define their
# own wenv_bootstrap function without conflict)
_wenv_bootstrap() {
    local usage="\
USAGE
    wenv bootstrap [-h] <wenv>

OPTIONS
  -h                    Display this help message.
"

    OPTIND=1
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    if ! is_wenv "$1"; then
        return 1
    fi
    local wenv="$1"
    run_wenv_def "$wenv"
    ! function_exists wenv_bootstrap && return 0
    wenv_bootstrap
    unset_quiet -f wenv_bootstrap
}

wenv_tmux_layout() {
    local layout="$1"
    shift
    case "$layout" in
        dev)
            wenv_tmux_split v
            tmux resize-pane -y 7
            [[ -n "$@" ]] && tmux send-keys "$*" 'Enter'
            tmux select-pane -U
            ;;
        devloop)
            local watch='git'
            [[ "$1" == '-w' ]] && watch="$2" && shift 2
            wenv_tmux_layout 'dev' "monitor $watch $*"
            ;;
        dev-tasks)
            local watch='git'
            [[ "$1" == '-w' ]] && watch="$2" && shift 2
            wenv_tmux_split v
            tmux resize-pane -y 7
            [[ -n "$@" ]] && tmux send-keys "monitor $watch $@" 'Enter'
            wenv_tmux_split h
            tmux send-keys 'wenv task show' 'Enter'
            tmux select-pane -L
            tmux select-pane -U
            ;;
        tasks)
            wenv_tmux_split v
            tmux resize-pane -y 7
            tmux send-keys 'wenv task show' 'Enter'
            tmux select-pane -U
            ;;
        split-tasks)
            wenv_tmux_layout tasks
            wenv_tmux_split h
            [[ -n "$@" ]] && tmux send-keys "$@" 'Enter'
            tmux select-pane -L
            ;;
        *)
            return 1
            ;;
    esac
}

wenv_tmux_split() {
    while getopts ":n:" opt; do
        case $opt in
            n) [[ ! -z "$OPTARG" ]] && local name="$OPTARG" ;;
            *) echo "invalid flag: $opt" ; exit 1 ;;
        esac
    done
    shift $((OPTIND-1))

    local wenv_init_cmd='WENV_EXEC="unset WENV; wenv_exec -c \"$WENV\"" zsh -i'
    local direction="$1"
    shift
    local user_cmd=$@
    case "$direction" in
        h|horizontal)
            split_args=('split-window' '-h')
            ;;
        v|vertical)
            split_args=('split-window')
            ;;
        c|window)
            split_args=('new-window')
            [[ -n "$name" ]] && split_args+=('-n' "$name")
            ;;
        *)
            return 1
            ;;
    esac
    tmux $split_args -c "#{pane_current_path}" "$wenv_init_cmd"
    [[ -n "$user_cmd" ]] && tmux send-keys "$user_cmd" 'Enter'
}

is_wenv() {
    if [[ -z "$1" ]]; then
        return 1
    fi
    local wenv_file="$WENV_CFG/wenvs/$1"
    if [[ ! -f "$wenv_file" ]]; then
        return 1
    fi
    return 0
}

unset_quiet() {
    unset $@ 2>/dev/null
}

function_exists() {
    declare -f "$1" >/dev/null
}
