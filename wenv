#!/usr/bin/env zsh

wenv_def() {
    WENV_DIR="$SRC/wenv"
    WENV_DEPS=()
    WENV_PROJECT='wenv'
    WENV_TASK=''

    bootstrap_wenv() {}
    startup_wenv() {}
    shutdown_wenv() {}
}

export WENV_CFG="${XDG_CONFIG_HOME:-$HOME/.config}/wenv"

wenv() {
    local usage="\
USAGE
  wenv [-h] <cmd>

OPTIONS
  -h                    Display this help message.

SUBCOMMANDS
  start <wenv>          Start the working environment <wenv>.
  stop                  Stop the current working environment.
  new                   Create a new working environment.
  list                  List all wenvs
  edit <wenv>           Edit the wenv file for <wenv>.
  rename <old> <new>    Rename wenv <old> to <new>.
  remove <wenv>         Delete the wenv file for <wenv>.
  source <wenv>         Source <wenv>'s environment (excluding its wenv_def).
  cd <wenv>             Change to <wenv>'s base directory.
  task <cmd>            Access the project task list.
  extension <cmd>       Interact with wenv extensions.
  bootstrap <wenv>      Run <wenv>'s bootstrap function.

Run \`wenv <cmd> -h\` for more information on a given subcommand <cmd>.
"

    [[ $# == 0 ]] && { echo "$usage" >&2 ; return 1 }
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local wenv_command="$1"
    shift
    case "$wenv_command" in
        start)
            wenv_start $@
            ;;
        stop)
            wenv_stop $@
            ;;
        'cd')
            wenv_cd $@
            ;;
        new)
            wenv_new $@
            ;;
        ls|list)
            wenv_list $@
            ;;
        task)
            wenv_task $@
            ;;
        edit)
            wenv_edit $@
            ;;
        rm|remove)
            wenv_remove $@
            ;;
        mv|rename)
            wenv_rename $@
            ;;
        'source')
            wenv_source $@
            ;;
        extension)
            wenv_extension $@
            ;;
        bootstrap)
            wenv_bootstrap $@
            ;;
    esac
}

wenv_start() {
    local usage="\
USAGE
  wenv start [-t] [-i] [-q] [-h] <wenv> - Start working environemnt <wenv>.

OPTIONS
  -t    Open the wenv in tmux. Default: true.
  -i    Run <wenv>'s startup function. Default: true.
  -q    Don't show <wenv>'s task list on startup. Default: false.
  -d    Don't attach to the wenv's tmux session after starting. Default: false.
  -h    Display this help message.
"

    local flag_t=1
    local flag_q=0
    local flag_i=1
    local flag_d=0
    while getopts ":tqidh" opt; do
        case $opt in
            t)
                flag_t=0
                ;;
            q)
                flag_q=1
                ;;
            i)
                flag_i=0
                ;;
            d)
                flag_d=1
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ $# == 0 || ! -f "$WENV_CFG/wenvs/$1" ]]; then
        return 1
    fi
    local wenv="$1"

    # check if wenv is already running
    tmux list-sessions | grep "^$wenv:" >/dev/null && { echo "wenv $wenv already running" ; return 1 }

    if ((flag_t == 0)); then
        wenv_stop
        wenv_exec $@ || return 1
        ((flag_i == 1)) && startup_wenv
        ((flag_q == 1)) || wenv task show
        return 0
    fi

    tmux new-session -d -s "$wenv"

    mkdir -p /tmp/wenv
    # replace / with - for wenvs in subdirectories
    local tmp_start_file="/tmp/wenv/start-$(echo $wenv | perl -pe 's|/|-|')"
    [[ -f "$tmp_start_file" ]] && rm -f "$tmp_start_file"
    echo -e '
        wenv_exec '"$@"' || return 1
        tmux set-environment WENV "$WENV"
        (('"$flag_i"' == 1)) && startup_wenv
        clear
        (('"$flag_q"' == 1)) || wenv task show
    '> "$tmp_start_file"

    tmux send -t "$wenv" "source $tmp_start_file && rm -f $tmp_start_file" ENTER

    ((flag_d == 0)) && tmux attach-session -t "$wenv"
    return 0
}

wenv_exec() {
    local flag_c=1
    while getopts ":c" opt; do
        case $opt in
            c) flag_c=0 ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$1" ]] && return 1
    export WENV="$1"

    run_wenv_def "$WENV" || { echo "wenv_def() not defined for wenv '$WENV'" >&2 ; return 1 }
    wenv_source "$WENV" || { echo "failed to source wenv '$WENV'" >&2 ; return 1 }

    export ORIGINAL_PS1="$PS1"
    export PS1="($WENV) $ORIGINAL_PS1"

    [[ -n "$WENV_TASK" ]] && task start "$WENV_TASK" >/dev/null 2>&1

    ((flag_c == 1)) && cd "$WENV_DIR" &> /dev/null

    return 0
}

wenv_stop() {
    local usage="\
USAGE
  wenv stop [-h] [-f] [-s] - Shutdown the active working environment.

OPTIONS
  -f    Force shutdown even if \`shutdown_wenv()\` fails. Default: false.
  -s    Run the active wenv's shutdown function. Default: true.
  -h    Display this help message.
"

    [[ -z "$WENV" ]] && return 1

    local flag_f=0
    local flag_s=1
    while getopts ":fsh" opt; do
        case $opt in
            f)
                flag_f=1
                ;;
            s)
                flag_s=0
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # make sure we're in a git repo and the force flag isn't set
    # if git rev-parse --is-inside-work-tree >/dev/null 2>&1 && ((flag_f != 1)); then
    #     git diff-index --quiet HEAD -- 2>/dev/null
    #     [[ $? -ne 0 ]] && [[ $? -ne 128 ]] && { echo "Error: Dirty working tree. Please clean up and try again." ; return 1 }
    # fi

    wenv_cd

    [[ -n "$WENV_TASK" ]] && task "$WENV_TASK" stop

    ((flag_s == 1)) && shutdown_wenv
    [[ $? -ne 0 ]] && ((flag_f != 1)) && { echo "error: shutdown_wenv failed" ; return 1 }
    wenv_clean_up
}

wenv_clean_up() {
    [[ -z "$WENV" ]] && return 1

    unset_quiet WENV
    unset_wenv_vars
    unset_quiet -f {bootstrap,startup,shutdown}_wenv

    if [[ -n "$TMUX" ]]; then
        tmux set-environment WENV ''
        tmux rename-session $(tmux display-message -p '#{session_id}' | tr -d '$')
    fi
    export PS1="$ORIGINAL_PS1"
}

load_wenv_vars() {
    unset_wenv_vars
    run_wenv_def "$@"
    unset_quiet -f bootstrap_wenv,startup_wenv,shutdown_wenv
}

unset_wenv_vars() {
    unset_quiet WENV_{DIR,DEPS,PROJECT,TASK}
}

run_wenv_def() {
    [[ -z "$1" ]] && return 1
    local wenv="$1"
    eval "$(source $WENV_CFG/wenvs/$wenv && declare -f wenv_def)"
    function_exists wenv_def || return 1
    wenv_def
    unset_quiet -f wenv_def
}

wenv_new() {
    local usage="\
USAGE
  wenv new [-d <dir>] [-i <wenv>] [-h] <name> - Create a new wenv called <name>.

OPTIONS
  -d        Initialize wenv with <dir> as the new wenv's base directory rather than the current working directory.
  -i <wenv> Use <wenv>'s wenv file as the initial definition for the new wenv.
  -h        Display this help message.
"

    local template="$WENV_CFG/template"
    local wenv_dir=$(pwd)
    while getopts ":d:i:h" opt; do
        case $opt in
            d)
                wenv_dir="$OPTARG"
                ;;
            i)
                template="$WENV_CFG/wenvs/${OPTARG}"
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            :)
                echo "unknown option: $OPTARG requires an argument" >&2
                return 1
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$1" ]] && return 1
    local wenv="$1"

    cat =(perl -pe "s|WENV_DIR=.*?$|WENV_DIR=\"$wenv_dir\"|" "$template") > "$WENV_CFG/wenvs/$wenv"

    wenv_edit "$wenv"
}

wenv_edit() {
    local usage="\
USAGE
  wenv edit [-h] <wenv> - Open <wenv>'s wenv file in \$EDITOR.

OPTIONS
  -h    Display this help message.
"

    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    # nice bash syntax for setting var to first non-empty variable
    local wenv="${1:-${WENV}}"
    [[ -f "$WENV_CFG/wenvs/$wenv" ]] && $EDITOR "$WENV_CFG/wenvs/$wenv"
}

wenv_list() {
    local usage="\
USAGE
  wenv list [-h] - List wenvs.

OPTIONS
  -h        Display this help message.
"

    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    find "$WENV_CFG/wenvs" ! -type d | perl -pe "s|$WENV_CFG/wenvs/||" | sort
}

wenv_remove() {
    local usage="\
USAGE
  wenv remove [-h] [<rm_args>] <wenv> - Delete <wenv>'s wenv file.

OPTIONS
  -h        Display this help message.
  <rm_args> List of arguments to forward to \`rm\`.
"

    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            *) # forward the rest of the args to rm
                break
                ;;
        esac
    done

    # last passed argument is wenv to remove (usually quoted string)
    local wenv="${@[$#]}"
    # all other args are passed to rm
    local rm_args=${@:1:$(($# - 1))}

    if ! is_wenv "$wenv"; then
        echo "WENV $wenv does not exist."
        return 1
    fi

    local wenv_file="$WENV_CFG/wenvs/$wenv"
    eval "rm $rm_args $wenv_file"
}

wenv_source() {
    local usage="\
USAGE
  wenv source [-h] [<wenv>, ...] - Source one or more wenvs + their dependencies.

OPTIONS
  -h    Display this help message.

DESCRIPTION
  Calling \`wenv source\` with no arguments will source the active wenv's
  aliases and its dependencies.

  Calling as \`wenv source [<wenv>, ...]\` will source the aliases of every
  wenv in the argument list, as well as each wenv's dependencies.
"

    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    if (($# == 0)); then
        source_wenvs_recursively "$WENV"
        run_wenv_def "$WENV"
    else
        source_wenvs_recursively $@
        [[ -n "$WENV" ]] && run_wenv_def "$WENV"
    fi

    return 0
}

source_wenvs_recursively() {
    local wenv
    for wenv in $@; do
        ! is_wenv "$wenv" && { echo "error: '$wenv' is not a wenv" >&2 ; continue }
        load_wenv_vars "$wenv"
        ((${#WENV_EXTENSIONS[@]} != 0)) && wenv_extension_load "${WENV_EXTENSIONS[@]}"
        ((${#WENV_DEPS[@]} != 0)) && source_wenvs_recursively "${WENV_DEPS[@]}" && load_wenv_vars "$wenv"
        source "$WENV_CFG/wenvs/$wenv" >/dev/null
    done
    unset_wenv_vars
}

wenv_cd() {
    local usage="\
USAGE
  wenv cd [-r] [-h] <wenv> - cd into <wenv>'s base directory.

OPTIONS
  -r    Rename the current tmux window to the designated wenv's name (<wenv>).
  -h    Display this help message.

DESCRIPTION
  Calling \`wenv cd\` with no arguments will \`cd\` into the active wenv's base
  directory.

  Calling as \`wenv cd <wenv>\` will \`cd\` into <wenv>'s base directory.

  The base directory of a wenv is defined by its WENV_DIR value.
"

    local flag_r=0
    while getopts ":rh" opt; do
        case $opt in
            r)
               flag_r=1
               ;;
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ -z "$1" ]]; then
        [[ ! -z "$WENV_DIR" ]] && cd "$WENV_DIR" &> /dev/null
        ((flag_r == 1)) && tmux rename-window "$WENV"
        return 0
    fi
    if ! is_wenv "$1"; then
        return 1
    fi
    local wenv="$1"

    # TODO: need a better way to do this
    # load and cd to input wenv
    load_wenv_vars "$wenv"
    cd "$WENV_DIR"
    unset_wenv_vars

    # reload the wenv that was previously running
    run_wenv_def "$WENV"

    ((flag_r == 1)) && tmux rename-window "$wenv"

    return 0
}

wenv_task() {
    local usage="\
USAGE
  wenv task [-h] [<cmd>] - Access the active wenv's tasks.

OPTIONS
  -h    Display this help message.

SUBCOMMANDS
  show  Show the task list for the active wenv.
  add   Add a task to the active wenv's task list.

DESCRIPTION
  As a convenient shorthand, running \`wenv task\` defaults to running
  \`wenv task show\`.

  Use  \`wenv task <cmd> -h\` for more information on a given subcommand <cmd>.
"

    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    local arg="$1"
    shift 2> /dev/null
    case "$arg" in
        s|show)
            wenv_task_show $@
            ;;
        a|add)
            wenv_task_add $@
            ;;
        *)
            wenv_task_show "$arg" $@
            ;;
    esac
}

wenv_task_show() {
    local usage="\
USAGE
  wenv task show [-h] - Show the tasks for the active wenv.

OPTIONS
  -w <wenv>    Show <wenv>'s task list, instead of the active wenv's.
  -h           Display this help message.
"

    local wenv="${WENV_PROJECT:-${WENV}}"
    [[ -z "$wenv" ]] && return 1
    local flag_w=0
    while getopts ":w:h" opt; do
        case $opt in
            w)
                [[ ! -z "$OPTARG" ]] && wenv="$OPTARG"
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            --)
                break
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # TODO: document or delete this
    local report="$1"
    [[ -z "$report" ]] && report="project"

    echo "$wenv"
    task "$report" project:"$wenv"
}

wenv_task_add() {
    local usage="\
USAGE
  wenv task add [-h] [-w <wenv>] [<mods>] <desc> - Add a task to the active wenv's task list.

OPTIONS
  -w <wenv>    Add a task to <wenv>'s task list, instead of the active wenv's.
  <mods>       List of Taskwarrior modifiers. See `man task` for more details.
  -h           Display this help message.

DESCRIPTION
  This command accepts an optional series of Taskwarrior attributes <attrs>,
  followed by a description for the task <desc>. The task's 'project' field is
  automatically set to \$WENV_PROJECT if this value is set by the wenv's
  definition, otherwise it's set to the wenv name.
"

    [[ -z "$@" ]] && return 1
    local wenv="${WENV_PROJECT:-${WENV}}"
    local flag_w=0
    while getopts ":w:h" opt; do
        case $opt in
            w)
                [[ ! -z "$OPTARG" ]] && local wenv="$OPTARG"
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            --)
                break
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # last passed argument is description (usually quoted string)
    local desc="${@[$#]}"
    # all other args are passed to task warrior (yeah, this is ugly)
    local task_args=${@:1:$(($# - 1))}
    task add project:"$wenv" "$task_args" -- "$desc"
}

wenv_rename() {
    local usage="\
USAGE
  wenv rename [-h] <old> <new> - Rename wenv <old> to <new>.

OPTIONS
  -h                    Display this help message.
"

    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    [[ $# != 2 ]] && return 1
    local old="$1"
    local new="$2"

    mv "$WENV_CFG/wenvs/$old" "$WENV_CFG/wenvs/$new"
}

wenv_bootstrap() {
    local usage="\
USAGE
  wenv bootstrap [-h] <wenv> - Run the bootstrap function for a wenv.

OPTIONS
  -h    Display this help message.

DESCRIPTION
  A wenv's bootstrap function is used to set up the wenv's environment before
  the first time it's used. A wenv bootstrap function might pull down relevant
  git repos, install relevant packages, create config files, etc.
"

    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    ! is_wenv "$1" && return 1
    local wenv="$1"
    run_wenv_def "$wenv"
    ! function_exists bootstrap_wenv && return 0
    bootstrap_wenv
    unset_quiet -f bootstrap_wenv
}

wenv_extension() {
    local usage="\
USAGE
  wenv extension [-h] [<cmd>] - Interact with wenv extensions.

OPTIONS
  -h    Display this help message.

SUBCOMMANDS
  load  Load an extension.
  open  Create or edit existing extensions.

DESCRIPTION
  Use  \`wenv task <cmd> -h\` for more information on a given subcommand <cmd>.
"

    while getopts ":h" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    local arg="$1"
    shift 2> /dev/null
    case "$arg" in
        load)
            wenv_extension_load $@
            ;;
        open)
            wenv_extension_open $@
            ;;
        remove)
            wenv_extension_remove $@
            ;;
        *)
            echo "$usage" >&2
            return 1
            ;;
    esac
}

wenv_extension_load() {
    local usage="\
USAGE
  wenv extension load [-h] <extension> [<extension> ...] - Source wenv extensions.

OPTIONS
  -h                               Display this help message.

ARGUMENTS
  <extension> [<extension> ...]    The names of the extension files to load.

DESCRIPTION
  This function sources the corresponding extension file at \$WENV_CFG/<extension>.
  This will only source the extension file in the current shell. See the
  documentation on the WENV_EXTENSIONS environment variable for loading an
  extension in every shell of a wenv.
"

    while getopts ":h" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$@" ]] && { echo "$usage" >&2 ; return 1 }
    local extensions="$WENV_CFG/extensions"
    for extension in "$@"; do
        if [[ ! -f "$extensions/$extension" ]]; then
            echo "'$extension' not found in $extensions" >&2
            return 1
        fi
        source "$extensions/$extension"
    done
}

wenv_extension_open() {
    local usage="\
USAGE
  wenv extension new [-h] <extension> [<extension> ...] - Create or edit existing extensions.

OPTIONS
  -h                               Display this help message.

ARGUMENTS
  <extension> [<extension> ...]    The names of the extension files to open.

DESCRIPTION
  Opens one or more extension files in \$EDITOR. When opening a extension file
  that doesn't already exist, the file will be created with a default shebang.
"

    while getopts ":h" opt; do
        case $opt in
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    [[ -z "$@" ]] && { echo "$usage" >&2 ; return 1 }

    local abs=()
    for ext in $@; do
        file="$WENV_CFG/extensions/$ext"
        [[ ! -f "$file" ]] && echo '#!/usr/bin/env zsh' > "$file"
        abs+=($file)
    done
    $EDITOR "$abs[@]"
}

wenv_extension_remove() {
    local usage="\
USAGE
  wenv extension remove [-h] [-f] <extension> [<extension> ...] - Delete extension files.

OPTIONS
  -h    Display this help message.
  -f    Force removal (passes \`-f\` flag to \`rm\`).

DESCRIPTION
  Removes extensions from \$WENV_CFG/extensions. If any of the passed extension
  files don't exist, nothing will be removed.
"

    local flag_f=0
    while getopts ":fh" opt; do
        case "$opt" in
            f)
                flag_f=1
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    declare -A abs
    for ext in $@; do
        local file="$WENV_CFG/extensions/$ext"
        [[ ! -f "$file" ]] && { echo "Extension '$ext' does not exist" >&2 ; return 1 }
        abs[$ext]="$file"
    done

    if ((flag_f == 1)); then
        rm -f "${abs[@]}"
    else
        for ext in $@; do
            rm "${abs[$ext]}"
        done
    fi
    return 0
}

wenv_tmux_split() {
usage="\
USAGE
  wenv_tmux_split [-h] [-n <name>] h|v|c [<cmd>] - Open a new tmux pane/window.

OPTIONS
  -v <name> Set the name of the tmux window to \`<name>\`.
  -h        Display this help message.

ARGUMENTS
  h|v|c    \`h\`, \`v\`, or \`c\` to open a horizontal pane, vertical pane, or new
           window, resp.
  <cmd>    The command to run in the newly-opened terminal, if any.
"

    while getopts ":n:h" opt; do
        case $opt in
            n)
                [[ ! -z "$OPTARG" ]] && local name="$OPTARG"
                ;;
            h)
                echo "$usage"
                return 0
                ;;
            --)
                break
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    local wenv_init_cmd='WENV_EXEC="unset WENV; wenv_exec -c \"$WENV\"" zsh -i'
    local direction="$1"
    shift
    local user_cmd=$@
    case "$direction" in
        h|horizontal)
            split_args=('split-window' '-h')
            ;;
        v|vertical)
            split_args=('split-window')
            ;;
        c|window)
            split_args=('new-window')
            [[ -n "$name" ]] && split_args+=('-n' "$name")
            ;;
    esac
    tmux $split_args -c "#{pane_current_path}" "$wenv_init_cmd"
    [[ -n "$user_cmd" ]] && tmux send-keys "$user_cmd" 'Enter'
}

wenv_tmux_layout() {
    local layout="$1"
    shift
    case "$layout" in
        dev)
            wenv_tmux_split v
            tmux resize-pane -y 7
            [[ -n "$@" ]] && tmux send-keys "$*" 'Enter'
            tmux select-pane -U
            ;;
        devloop|monitor)
            local watch='git'
            [[ "$1" == '-w' ]] && watch="$2" && shift 2
            wenv_tmux_layout 'dev' "monitor $watch $*"
            ;;
        dev-tasks)
            local watch='git'
            [[ "$1" == '-w' ]] && watch="$2" && shift 2
            wenv_tmux_split v
            tmux resize-pane -y 7
            [[ -n "$@" ]] && tmux send-keys "monitor $watch $@" 'Enter'
            wenv_tmux_split h
            tmux send-keys 'wenv task show' 'Enter'
            tmux select-pane -L
            tmux select-pane -U
            ;;
        tasks)
            wenv_tmux_split v
            tmux resize-pane -y 7
            tmux send-keys 'wenv task show' 'Enter'
            tmux select-pane -U
            ;;
        split-tasks)
            wenv_tmux_layout tasks
            wenv_tmux_split h
            [[ -n "$@" ]] && tmux send-keys "$@" 'Enter'
            tmux select-pane -L
            ;;
        *)
            return 1
            ;;
    esac
}

is_wenv() {
    if [[ -z "$1" ]]; then
        return 1
    fi
    local wenv_file="$WENV_CFG/wenvs/$1"
    if [[ ! -f "$wenv_file" ]]; then
        return 1
    fi
    return 0
}

unset_quiet() {
    unset $@ 2>/dev/null
}

function_exists() {
    declare -f "$1" >/dev/null
}
