#!/usr/bin/env zsh

# This is a simple example of a wenv that starts an environment for a toy web
# development environment. The WENV_DIR is just set to the base directory of my
# toy website. The diretory tree for this project looks like:
#
# $ tree
# .
# ├── css
# │   └── styles.css
# ├── index.html
# └── js
#     └── main.js
#
# Now look at the startup_wenv(). This starts by using wenv_tmux_split() to
# open a new window, named 'http', and run the command 'python -m http.server'
# (to run a simple HTTP server in the base directory of the wenv). After the
# first command runs, we'll be in the second tmux window. To get back to the
# first, we use the `tmux select-window` command. Then we use edit() to open
# the Javascript file main.js, which works because 'js' maps to 'main.js' in
# wenv_files. We pass the -r flag to edit() to rename the current tmux window
# to 'js'. The result of all of this is: two tmux windows, the first named 'js'
# with main.js opened in your editor, and the second named 'http' that contains
# a running python HTTP server.

wenv_def() {
    WENV_DIR="$HOME/scratch/webdev-practice"
    WENV_DEPS=()

    startup_wenv() {
        wenv_tmux_split -n http window 'python -m http.server'
        tmux select-window -t 1
        edit -r js
    }
    shutdown_wenv() {}
    bootstrap_wenv() {}
}

declare -Ag wenv_dirs=(
    ['js']='js'
    ['css']='css'
)
declare -Ag wenv_files=(
    ['html']='index.html'
    ['js']="js/main.js"
    ['css']="css/styles.css"
)

c() {
    local flag_r=0
    local wname=""
    while getopts ":rn:" opt; do
        case $opt in
            r)
                flag_r=1
                ;;
            n)
                wname="$OPTARG"
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                ;;
        esac
    done
    shift $((OPTIND-1))

    local input="$1"
    shift

    [ "${wenv_dirs[$input]+0}" ] || { echo "no entry '$input'" >&2 ; return 1 }
    dir="${wenv_dirs[$input]}"
    (( flag_r == 1 )) && wname="$input"

    local abs
    if [[ $dir != /* ]]; then
        abs=$(realpath --relative-to=. "$WENV_DIR/$dir")
    else
        abs=$dir
    fi
    cd "$abs"

    [[ ! -z "$wname" ]] && tmux rename-window "$wname"
}
_c() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if (( COMP_CWORD == 1 )) && [[ ${word} == -* ]]; then
        COMPREPLY=( $(compgen -W "-r" -- ${word}) )
    elif (( COMP_CWORD == 1 )) || { ((COMP_CWORD == 2 )) && [[ ${prev} == -* ]]; }; then
        local opts="${(k)wenv_dirs[@]}"
        COMPREPLY=( $(compgen -W "${opts}" -- ${word}) )
    fi
}
complete -F _c c

edit() {
    local flag_r=0
    local wname=""
    local opts=""
    while getopts ":rn:o:" opt; do
        case $opt in
            r)
                flag_r=1
                ;;
            n)
                wname="$OPTARG"
                ;;
            o)
                opts="$OPTARG"
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                ;;
        esac
    done
    shift $((OPTIND-1))

    local files=()
    for arg in $@; do
        [ "${wenv_files[$arg]+0}" ] || echo "no entry '$arg'" >&2 && return 1
        files+="${wenv_files[$arg]}"
    done
    (( flag_r == 1 )) && wname="$1"

    local abs=()
    for file in $files; do
        if [[ $file != /* ]]; then
            abs+=($(realpath --relative-to=. "$WENV_DIR/$file"))
        else
            abs+=($file)
        fi
    done

    [[ ! -z "$wname" ]] && tmux rename-window "$wname"
    eval "$EDITOR $opts $abs"
}
_edit() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if [[ ${word} == -* ]]; then
        COMPREPLY=( $(compgen -W "-r -n -o" -- ${word}) )
    else
        local opts="${(k)wenv_files[@]}"
        COMPREPLY=( $(compgen -W "${opts}" -- ${word}) )
    fi
}
complete -F _edit edit
